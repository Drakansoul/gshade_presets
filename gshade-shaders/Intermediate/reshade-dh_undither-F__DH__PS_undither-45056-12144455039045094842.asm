//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   int iPS;                           // Offset:    0 Size:     4
//   int iRadius;                       // Offset:    4 Size:     4
//   bool bKeepHue;                     // Offset:    8 Size:     4
//   float fHueMaxDistance;             // Offset:   12 Size:     4
//   float fSatMaxDistance;             // Offset:   16 Size:     4
//   float fLumMaxDistance;             // Offset:   20 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 11
sample_l_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0, l(0.000000)
min r0.w, r0.z, r0.y
min r0.w, r0.w, r0.x
max r1.x, r0.z, r0.y
max r1.x, r0.x, r1.x
add r1.y, r0.w, r1.x
add r0.w, -r0.w, r1.x
ne r1.z, r0.w, l(0.000000)
add r2.xyz, -r0.zxyz, r1.xxxx
div r2.xyz, r2.xyzx, r0.wwww
add r2.xyz, -r2.zxyz, r2.xyzx
add r2.xyz, r2.xyzx, l(6.000000, 2.000000, 4.000000, 0.000000)
ge r0.xyz, r0.xyzx, r1.xxxx
and r0.xyz, r0.xyzx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
mul r0.xyz, r2.xyzx, r0.xyzx
max r0.x, r0.x, r0.z
max r0.x, r0.x, r0.y
mul r0.x, r0.x, l(0.166667)
add r0.z, r1.y, l(-1.000000)
add r0.z, -|r0.z|, l(1.000000)
div r0.y, r0.w, r0.z
and r0.xy, r0.xyxx, r1.zzzz
imul null, r0.z, cb0[0].y, cb0[0].y
itof r0.z, r0.z
itof r1.xz, cb0[0].xxyx
mul r2.xy, r1.xxxx, l(0.000260, 0.000468, 0.000000, 0.000000)
mad_sat r2.zw, -r1.zzzz, r2.xxxy, v1.xxxy
mad_sat r1.zw, r1.zzzz, r2.xxxy, v1.xxxy
ge r3.xy, r1.zwzz, r2.zwzz
add r0.w, r0.x, l(1.000000)
add r3.z, r0.z, l(1.000000)
mov r4.xyz, l(0,0,0,0)
mov r5.x, r2.z
mov r3.w, l(0)
mov r4.w, r3.x
loop 
  breakc_z r4.w
  mov r6.xyz, r4.xyzx
  mov r5.z, r2.w
  mov r5.w, r3.w
  mov r6.w, r3.y
  loop 
    breakc_z r6.w
    mov r5.y, r5.z
    add r7.xy, r5.xyxx, -v1.xyxx
    div r7.xy, r7.xyxx, r2.xyxx
    round_z r7.xy, r7.xyxx
    dp2 r7.x, r7.xyxx, r7.xyxx
    lt r7.y, r0.z, r7.x
    if_nz r7.y
      mad r7.y, r1.x, l(0.000468), r5.z
      ge r6.w, r1.w, r7.y
      mov r5.z, r7.y
      continue 
    endif 
    sample_l_indexable(texture2d)(float,float,float,float) r7.yzw, r5.xyxx, t0.wxyz, s0, l(0.000000)
    min r5.y, r7.w, r7.z
    min r5.y, r5.y, r7.y
    max r8.x, r7.w, r7.z
    max r8.x, r7.y, r8.x
    add r8.y, r5.y, r8.x
    add r5.y, -r5.y, r8.x
    ne r8.z, r5.y, l(0.000000)
    add r9.xyz, -r7.wyzw, r8.xxxx
    div r9.xyz, r9.xyzx, r5.yyyy
    add r9.xyz, -r9.zxyz, r9.xyzx
    add r9.xyz, r9.xyzx, l(6.000000, 2.000000, 4.000000, 0.000000)
    ge r10.xyz, r7.yzwy, r8.xxxx
    and r10.xyz, r10.xyzx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
    mul r9.xyz, r9.xyzx, r10.xyzx
    max r8.x, r9.x, r9.z
    max r8.x, r8.x, r9.y
    mul r9.x, r8.x, l(0.166667)
    add r8.x, r8.y, l(-1.000000)
    add r8.x, -|r8.x|, l(1.000000)
    div r9.y, r5.y, r8.x
    and r8.xz, r8.zzzz, r9.xxyx
    add r5.y, r0.y, -r8.z
    lt r8.z, cb0[1].x, |r5.y|
    if_nz r8.z
      mad r8.z, r1.x, l(0.000468), r5.z
      ge r6.w, r1.w, r8.z
      mov r5.z, r8.z
      continue 
    endif 
    mul r8.y, r8.y, l(0.500000)
    mad r8.y, r1.y, l(0.500000), -r8.y
    lt r8.z, cb0[1].y, |r8.y|
    if_nz r8.z
      mad r8.z, r1.x, l(0.000468), r5.z
      ge r6.w, r1.w, r8.z
      mov r5.z, r8.z
      continue 
    endif 
    ne r8.z, r0.x, r8.x
    add r8.w, -r0.x, r8.x
    add r8.x, r0.w, -r8.x
    min r8.x, r8.x, r8.w
    add r8.x, r8.x, r8.x
    and r8.x, r8.x, r8.z
    lt r8.z, cb0[0].w, r8.x
    if_nz r8.z
      mad r8.z, r1.x, l(0.000468), r5.z
      ge r6.w, r1.w, r8.z
      mov r5.z, r8.z
      continue 
    endif 
    add r8.x, -r8.x, l(1.000000)
    add r5.y, -|r5.y|, r8.x
    add r5.y, r5.y, l(1.000000)
    add r5.y, -|r8.y|, r5.y
    add r5.y, r5.y, l(1.000000)
    add r7.x, r3.z, -r7.x
    div r7.x, r7.x, r3.z
    add r5.y, r5.y, r7.x
    add r5.w, r5.y, r5.w
    mad r6.xyz, r5.yyyy, r7.yzwy, r6.xyzx
    mad r5.z, r1.x, l(0.000468), r5.z
    ge r6.w, r1.w, r5.z
  endloop 
  mov r4.xyz, r6.xyzx
  mov r3.w, r5.w
  mad r5.x, r1.x, l(0.000260), r5.x
  ge r4.w, r1.z, r5.x
endloop 
div r0.yzw, r4.xxyz, r3.wwww
if_nz cb0[0].z
  min r1.x, r0.w, r0.z
  min r1.x, r0.y, r1.x
  max r1.y, r0.w, r0.z
  max r1.y, r0.y, r1.y
  add r1.z, r1.x, r1.y
  mul r1.w, r1.z, l(0.500000)
  add r1.x, -r1.x, r1.y
  ne r1.y, r1.x, l(0.000000)
  add r1.z, r1.z, l(-1.000000)
  add r1.z, -|r1.z|, l(1.000000)
  div r1.x, r1.x, r1.z
  and r1.x, r1.x, r1.y
  mad r2.xyz, r0.xxxx, l(6.000000, 6.000000, 6.000000, 0.000000), l(-3.000000, -2.000000, -4.000000, 0.000000)
  mad_sat r2.xyz, |r2.xyzx|, l(1.000000, -1.000000, -1.000000, 0.000000), l(-1.000000, 2.000000, 2.000000, 0.000000)
  add r2.xyz, r2.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
  mul r0.x, r1.x, r1.z
  mad r0.yzw, r2.xxyz, r0.xxxx, r1.wwww
endif 
mov o0.xyz, r0.yzwy
mov o0.w, l(1.000000)
ret 
// Approximately 148 instruction slots used
