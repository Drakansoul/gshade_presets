//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   int ClarityRadiusTwo;              // Offset:    0 Size:     4
//   float ClarityOffsetTwo;            // Offset:    4 Size:     4 [unused]
//   int ClarityBlendModeTwo;           // Offset:    8 Size:     4 [unused]
//   int ClarityBlendIfDarkTwo;         // Offset:   12 Size:     4 [unused]
//   int ClarityBlendIfLightTwo;        // Offset:   16 Size:     4 [unused]
//   float BlendIfRange;                // Offset:   20 Size:     4 [unused]
//   float ClarityStrengthTwo;          // Offset:   24 Size:     4 [unused]
//   float MaskContrast;                // Offset:   28 Size:     4 [unused]
//   float ClarityDarkIntensityTwo;     // Offset:   32 Size:     4 [unused]
//   float ClarityLightIntensityTwo;    // Offset:   36 Size:     4 [unused]
//   float DitherStrength;              // Offset:   40 Size:     4 [unused]
//   int PreprocessorDefinitions;       // Offset:   44 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s1                              sampler      NA          NA             s1      1 
// __V__Clarity2Tex                  texture  float4          2d             t4      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   x           0   TARGET   float   x   
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 0, 0.066490, 0, 0.044327},
                              { 0.000697, 0.128470, 0.000700, 0.087299},
                              { 0.001626, 0.111918, 0.001633, 0.082089},
                              { 0.002556, 0.087313, 0.002566, 0.073482},
                              { 0.003485, 0.061001, 0.003499, 0.062617},
                              { 0.004415, 0.038166, 0.004432, 0.050796},
                              { 0.005344, 0.021384, 0.005365, 0.039226},
                              { 0.006274, 0.010729, 0.006298, 0.028837},
                              { 0.007204, 0.004821, 0.007231, 0.020181},
                              { 0.008133, 0.001940, 0.008164, 0.013445},
                              { 0.009063, 0.000699, 0.009097, 0.008527},
                              { 0, 0.033245, 0.010030, 0.005148},
                              { 0.000700, 0.065916, 0.010963, 0.002959},
                              { 0.001633, 0.063671, 0.011896, 0.001619},
                              { 0.002566, 0.059819, 0.012829, 0.000843},
                              { 0.003499, 0.054664, 0, 0.132980},
                              { 0.004432, 0.048587, 0.000682, 0.232276},
                              { 0.005365, 0.042005, 0.001593, 0.135326},
                              { 0.006298, 0.035321, 0.002504, 0.051156},
                              { 0.007231, 0.028888, 0.003417, 0.012539},
                              { 0.008164, 0.022981, 0.004332, 0.001991},
                              { 0.009109, 0.017782, 0, 0.398940},
                              { 0.010043, 0.013382, 0.000553, 0.295960},
                              { 0.010978, 0.009796, 0.001418, 0.004566},
                              { 0.011912, 0.006975, 0.002342, 0.000001},
                              { 0.012846, 0.004830, 0, 0},
                              { 0.013781, 0.003253, 0, 0},
                              { 0.014715, 0.002132, 0, 0},
                              { 0.015649, 0.001358, 0, 0} }
dcl_constantbuffer CB0[1], immediateIndexed
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xy
dcl_output o0.x
dcl_temps 3
sample_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t4.xyzw, s1
ieq r0.y, cb0[0].x, l(2)
if_nz r0.y
  mul r0.y, r0.x, l(0.066490)
  mov r1.x, l(0)
  mov r0.z, r0.y
  mov r0.w, l(1)
  mov r1.z, l(-1)
  loop 
    breakc_z r1.z
    mov r1.y, icb[r0.w + 0].x
    add r2.xy, r1.xyxx, v1.xyxx
    sample_l_indexable(texture2d)(float,float,float,float) r1.w, r2.xyxx, t4.yzwx, s1, l(0.000000)
    mad r1.w, r1.w, icb[r0.w + 0].y, r0.z
    add r2.xy, -r1.xyxx, v1.xyxx
    sample_l_indexable(texture2d)(float,float,float,float) r1.y, r2.xyxx, t4.yxzw, s1, l(0.000000)
    mad r0.z, r1.y, icb[r0.w + 0].y, r1.w
    iadd r0.w, r0.w, l(1)
    ilt r1.z, r0.w, l(11)
  endloop 
  mov o0.x, r0.z
else 
  ieq r0.y, cb0[0].x, l(3)
  if_nz r0.y
    mul r0.y, r0.x, l(0.044327)
    mov r1.x, l(0)
    mov r0.z, r0.y
    mov r0.w, l(1)
    mov r1.z, l(-1)
    loop 
      breakc_z r1.z
      mov r1.y, icb[r0.w + 0].z
      add r2.xy, r1.xyxx, v1.xyxx
      sample_l_indexable(texture2d)(float,float,float,float) r1.w, r2.xyxx, t4.yzwx, s1, l(0.000000)
      mad r1.w, r1.w, icb[r0.w + 0].w, r0.z
      add r2.xy, -r1.xyxx, v1.xyxx
      sample_l_indexable(texture2d)(float,float,float,float) r1.y, r2.xyxx, t4.yxzw, s1, l(0.000000)
      mad r0.z, r1.y, icb[r0.w + 0].w, r1.w
      iadd r0.w, r0.w, l(1)
      ilt r1.z, r0.w, l(15)
    endloop 
    mov o0.x, r0.z
  else 
    ieq r0.y, cb0[0].x, l(4)
    if_nz r0.y
      mul r0.y, r0.x, l(0.033245)
      mov r1.x, l(0)
      mov r0.z, r0.y
      mov r0.w, l(1)
      mov r1.z, l(-1)
      loop 
        breakc_z r1.z
        mov r1.y, icb[r0.w + 11].x
        add r2.xy, r1.xyxx, v1.xyxx
        sample_l_indexable(texture2d)(float,float,float,float) r1.w, r2.xyxx, t4.yzwx, s1, l(0.000000)
        mad r1.w, r1.w, icb[r0.w + 11].y, r0.z
        add r2.xy, -r1.xyxx, v1.xyxx
        sample_l_indexable(texture2d)(float,float,float,float) r1.y, r2.xyxx, t4.yxzw, s1, l(0.000000)
        mad r0.z, r1.y, icb[r0.w + 11].y, r1.w
        iadd r0.w, r0.w, l(1)
        ilt r1.z, r0.w, l(18)
      endloop 
      mov o0.x, r0.z
    else 
      ieq r0.y, cb0[0].x, l(1)
      if_nz r0.y
        mul r0.y, r0.x, l(0.132980)
        mov r1.x, l(0)
        mov r0.z, r0.y
        mov r0.w, l(1)
        mov r1.z, l(-1)
        loop 
          breakc_z r1.z
          mov r1.y, icb[r0.w + 15].z
          add r2.xy, r1.xyxx, v1.xyxx
          sample_l_indexable(texture2d)(float,float,float,float) r1.w, r2.xyxx, t4.yzwx, s1, l(0.000000)
          mad r1.w, r1.w, icb[r0.w + 15].w, r0.z
          add r2.xy, -r1.xyxx, v1.xyxx
          sample_l_indexable(texture2d)(float,float,float,float) r1.y, r2.xyxx, t4.yxzw, s1, l(0.000000)
          mad r0.z, r1.y, icb[r0.w + 15].w, r1.w
          iadd r0.w, r0.w, l(1)
          ilt r1.z, r0.w, l(6)
        endloop 
        mov o0.x, r0.z
      else 
        if_z cb0[0].x
          mul r0.y, r0.x, l(0.398940)
          mov r1.x, l(0)
          mov r0.z, r0.y
          mov r0.w, l(1)
          mov r1.z, l(-1)
          loop 
            breakc_z r1.z
            mov r1.y, icb[r0.w + 21].z
            add r2.xy, r1.xyxx, v1.xyxx
            sample_l_indexable(texture2d)(float,float,float,float) r1.w, r2.xyxx, t4.yzwx, s1, l(0.000000)
            mad r1.w, r1.w, icb[r0.w + 21].w, r0.z
            add r2.xy, -r1.xyxx, v1.xyxx
            sample_l_indexable(texture2d)(float,float,float,float) r1.y, r2.xyxx, t4.yxzw, s1, l(0.000000)
            mad r0.z, r1.y, icb[r0.w + 21].w, r1.w
            iadd r0.w, r0.w, l(1)
            ilt r1.z, r0.w, l(4)
          endloop 
          mov o0.x, r0.z
        else 
          mov o0.x, r0.x
        endif 
      endif 
    endif 
  endif 
endif 
ret 
// Approximately 112 instruction slots used
