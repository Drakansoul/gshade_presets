//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   int mask;                          // Offset:    0 Size:     4 [unused]
//   bool blurToggle;                   // Offset:    4 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   x   
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyz         0   TARGET   float   xyz 
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps_siv linear noperspective v0.x, position
dcl_input_ps linear v1.xy
dcl_output o0.xyz
dcl_temps 5
add r0.x, v0.x, l(2.000000)
mul r0.y, r0.x, l(3.000000)
ge r0.y, r0.y, -r0.y
movc r0.yz, r0.yyyy, l(0,3.000000,0.333333,0), l(0,-3.000000,-0.333333,0)
mul r0.x, r0.z, r0.x
frc r0.x, r0.x
mul r0.x, r0.x, r0.y
ge r0.x, l(1.000000), r0.x
if_nz r0.x
  if_nz cb0[0].y
    mov r0.xyzw, l(0,0,0,0)
    mov r1.xy, l(-2,-1,0,0)
    loop 
      breakc_z r1.y
      imad r1.z, -r1.x, r1.x, l(6)
      itof r1.z, r1.z
      sqrt r1.z, r1.z
      round_ni r1.z, r1.z
      ftoi r1.w, -r1.z
      ge r2.x, r1.z, -r1.z
      itof r2.y, r1.x
      mad r3.x, r2.y, l(0.000260), v1.x
      mov r2.yzw, r0.xxyz
      mov r3.z, r0.w
      mov r3.w, r1.w
      mov r4.x, r2.x
      loop 
        breakc_z r4.x
        itof r4.y, r3.w
        mad r3.y, r4.y, l(0.000468), v1.y
        sample_l_indexable(texture2d)(float,float,float,float) r4.yzw, r3.xyxx, t0.wxyz, s0, l(0.000000)
        add r2.yzw, r2.yyzw, r4.yyzw
        iadd r3.zw, r3.zzzw, l(0, 0, 1, 1)
        itof r3.y, r3.w
        ge r4.x, r1.z, r3.y
      endloop 
      mov r0.xyz, r2.yzwy
      mov r0.w, r3.z
      iadd r1.x, r1.x, l(1)
      ige r1.y, l(2), r1.x
    endloop 
    itof r0.w, r0.w
    div o0.xyz, r0.xyzx, r0.wwww
    ret 
  else 
    sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0
    mov o0.xyz, r0.xyzx
    ret 
  endif 
endif 
mov o0.xyz, l(0,0,0,0)
ret 
// Approximately 52 instruction slots used
