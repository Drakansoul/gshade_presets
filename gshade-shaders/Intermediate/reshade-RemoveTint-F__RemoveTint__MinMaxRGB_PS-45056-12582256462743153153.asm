//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   float fUISpeed;                    // Offset:    0 Size:     4
//   bool bUIUseExcludeColor;           // Offset:    4 Size:     4
//   float3 fUIExcludeColor;            // Offset:   16 Size:    12
//   float fUIExcludeColorStrength;     // Offset:   28 Size:     4
//   int cUIDebug;                      // Offset:   32 Size:     4 [unused]
//   float fUIStrength;                 // Offset:   36 Size:     4 [unused]
//   float frametime;                   // Offset:   40 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __V__RemoveTint__texBackBuffer    texture  float4          2d             t4      1 
// __V__RemoveTint__texMinRGBLastFrame    texture  float4          2d            t10      1 
// __V__RemoveTint__texMaxRGBLastFrame    texture  float4          2d            t12      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[3], immediateIndexed
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t10
dcl_resource_texture2d (float,float,float,float) t12
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 7
mov r0.zw, l(0,0,0,0)
mov r1.xyz, l(1.000000,1.000000,1.000000,0)
mov r1.w, cb0[0].y
mov r0.y, l(0)
mov r2.xyzw, l(0,0,0,-1)
loop 
  breakc_z r2.w
  mov r3.xyz, r1.xyzx
  mov r3.w, r2.x
  mov r4.xy, r2.yzyy
  mov r0.x, l(0)
  mov r4.z, l(-1)
  loop 
    breakc_z r4.z
    ld_indexable(texture2d)(float,float,float,float) r5.xyz, r0.xyzw, t4.xyzw
    dp3 r4.w, r5.xyzx, cb0[1].xyzx
    log r4.w, |r4.w|
    mul r4.w, r4.w, cb0[1].w
    exp r4.w, r4.w
    min r4.w, r4.w, l(1.000000)
    add r4.w, -r4.w, l(1.000000)
    movc r4.w, r1.w, r4.w, l(1.000000)
    ge r5.w, r5.x, r3.w
    and r5.w, r5.w, l(0x3f800000)
    min r5.w, r4.w, r5.w
    add r6.x, -r3.w, r5.x
    mad r3.w, r5.w, r6.x, r3.w
    ge r5.w, r5.y, r4.x
    and r5.w, r5.w, l(0x3f800000)
    min r5.w, r4.w, r5.w
    add r6.x, -r4.x, r5.y
    mad r4.x, r5.w, r6.x, r4.x
    ge r5.w, r5.z, r4.y
    and r5.w, r5.w, l(0x3f800000)
    min r5.w, r4.w, r5.w
    add r6.x, -r4.y, r5.z
    mad r4.y, r5.w, r6.x, r4.y
    ge r5.w, r3.x, r5.x
    and r5.w, r5.w, l(0x3f800000)
    min r5.w, r4.w, r5.w
    add r5.x, -r3.x, r5.x
    mad r3.x, r5.w, r5.x, r3.x
    ge r5.x, r3.y, r5.y
    and r5.x, r5.x, l(0x3f800000)
    min r5.x, r4.w, r5.x
    add r5.y, -r3.y, r5.y
    mad r3.y, r5.x, r5.y, r3.y
    ge r5.x, r3.z, r5.z
    and r5.x, r5.x, l(0x3f800000)
    min r4.w, r4.w, r5.x
    add r5.x, -r3.z, r5.z
    mad r3.z, r4.w, r5.x, r3.z
    iadd r0.x, r0.x, l(1)
    ilt r4.z, r0.x, l(240)
  endloop 
  mov r1.xyz, r3.xyzx
  mov r2.x, r3.w
  mov r2.yz, r4.xxyx
  iadd r0.y, r0.y, l(1)
  ilt r2.w, r0.y, l(133)
endloop 
ld_indexable(texture2d)(float,float,float,float) r0.xyz, l(0, 0, 0, 0), t10.xyzw
ld_indexable(texture2d)(float,float,float,float) r3.xyz, l(0, 0, 0, 0), t12.xyzw
mul r0.w, cb0[0].x, cb0[2].z
mul_sat r0.w, r0.w, l(0.010000)
add r1.xyz, -r0.xyzx, r1.xyzx
mad_sat o0.xyz, r0.wwww, r1.xyzx, r0.xyzx
add r0.xyz, r2.xyzx, -r3.xyzx
mad_sat o1.xyz, r0.wwww, r0.xyzx, r3.xyzx
mov o0.w, l(1.000000)
mov o1.w, l(1.000000)
ret 
// Approximately 72 instruction slots used
