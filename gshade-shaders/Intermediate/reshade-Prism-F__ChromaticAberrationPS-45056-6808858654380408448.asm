//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   float4 K;                          // Offset:    0 Size:    16
//   uint ChromaticSamplesLimit;        // Offset:   16 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s2                              sampler      NA          NA             s2      1 
// __srgbV__ReShade__BackBufferTex    texture  float4          2d             t1      1 
// __V__BlueNoise__BlueNoiseTex      texture  float4          2d             t4      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyz         0   TARGET   float   xyz 
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[2], immediateIndexed
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xy
dcl_output o0.xyz
dcl_temps 6
dp2 r0.x, v1.xyxx, v1.xyxx
mul r0.y, r0.x, r0.x
mul r0.z, r0.x, r0.y
mul r0.w, r0.x, r0.z
dp4 r0.x, cb0[0].xyzw, r0.xyzw
add r0.x, r0.x, l(1.000000)
rcp r0.x, r0.x
add r0.x, r0.x, l(-1.000000)
mul r0.xyzw, r0.xxxx, v1.xyxy
mul r1.xy, v0.xyxx, l(0.000260, 0.000468, 0.000000, 0.000000)
and r1.z, cb0[1].x, l(1)
iadd r1.z, -r1.z, cb0[1].x
utof r1.z, r1.z
min r1.z, r1.z, l(128.000000)
ftou r1.z, r1.z
mul r0.xyzw, r0.xyzw, l(0.572211, 1.028213, 2197.291992, 2197.291992)
dp2 r0.z, r0.zwzz, r0.zwzz
sqrt r0.z, r0.z
round_pi r0.z, r0.z
ftou r0.z, r0.z
and r0.w, r0.z, l(1)
iadd r0.z, r0.w, r0.z
umax r0.z, r0.z, l(4)
umin r0.z, r1.z, r0.z
ult r0.w, l(0), r0.z
iadd r1.z, r0.z, l(-1)
utof r1.z, r1.z
utof r1.w, r0.z
mov r2.xyzw, l(0,0,0,0)
mov r3.x, r0.w
loop 
  breakc_z r3.x
  utof r3.y, r2.w
  div r3.z, r3.y, r1.z
  add r3.z, r3.z, l(-0.500000)
  mad r3.zw, r3.zzzz, r0.xxxy, r1.xxxy
  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, r3.zwzz, t1.xyzw, s2, l(0.000000)
  div r3.y, r3.y, r1.w
  mad r3.yzw, r3.yyyy, l(0.000000, 4.000000, 4.000000, 4.000000), l(0.000000, -3.500000, -1.000000, -2.000000)
  add_sat r5.yz, -|r3.zzwz|, l(0.000000, 1.500000, 1.500000, 0.000000)
  mov_sat r3.y, r3.y
  add r5.x, r3.y, r5.y
  add r5.w, -r5.x, l(1.000000)
  mad r2.xyz, r4.xyzx, r5.xzwx, r2.xyzx
  iadd r2.w, r2.w, l(1)
  ult r3.x, r2.w, r0.z
endloop 
div r0.x, l(2.000000), r1.w
mul r0.xyz, r0.xxxx, r2.xyzx
ge r1.xyz, l(0.003131, 0.003131, 0.003131, 0.000000), r0.xyzx
mul r2.xyz, r0.xyzx, l(12.920000, 12.920000, 12.920000, 0.000000)
log r0.xyz, |r0.xyzx|
mul r0.xyz, r0.xyzx, l(0.416667, 0.416667, 0.416667, 0.000000)
exp r0.xyz, r0.xyzx
mad r0.xyz, r0.xyzx, l(1.055000, 1.055000, 1.055000, 0.000000), l(-0.055000, -0.055000, -0.055000, 0.000000)
movc r0.xyz, r1.xyzx, r2.xyzx, r0.xyzx
ftou r1.xy, v0.xyxx
mul r0.xyz, r0.xyzx, l(255.000000, 255.000000, 255.000000, 0.000000)
and r1.xy, r1.xyxx, l(63, 63, 0, 0)
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyzw, t4.xyzw
frc r2.xyz, r0.xyzx
ge r1.xyz, r2.xyzx, r1.xyzx
round_pi r2.xyz, r0.xyzx
round_ni r0.xyz, r0.xyzx
movc r0.xyz, r1.xyzx, r2.xyzx, r0.xyzx
mul o0.xyz, r0.xyzx, l(0.003922, 0.003922, 0.003922, 0.000000)
ret 
// Approximately 68 instruction slots used
