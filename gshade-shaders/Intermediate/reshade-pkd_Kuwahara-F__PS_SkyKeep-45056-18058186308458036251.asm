//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   float2 CFG_KUWAHARA_RADIUS;        // Offset:    0 Size:     8 [unused]
//   float CFG_KUWAHARA_LOD;            // Offset:    8 Size:     4
//   bool CFG_KUWAHARA_ROTATION;        // Offset:   12 Size:     4
//   bool CFG_KUWAHARA_DEPTHAWARE;      // Offset:   16 Size:     4 [unused]
//   bool CFG_KUWAHARA_DEPTHAWARE_EXCLUDESKY;// Offset:   20 Size:     4
//   int CFG_KUWAHARA_DEPTHAWARE_SKYBLEND_STYLE;// Offset:   24 Size:     4 [unused]
//   float CFG_KUWAHARA_DEPTHAWARE_SKYBLEND_STRENGTH;// Offset:   28 Size:     4 [unused]
//   float2 CFG_KUWAHARA_DEPTHAWARE_CURVE;// Offset:   32 Size:     8 [unused]
//   float2 CFG_KUWAHARA_DEPTHAWARE_MINRADIUS;// Offset:   40 Size:     8
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// __V__ReShade__DepthBufferTex      texture  float4          2d             t2      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 13
dcl_indexableTemp x0[9], 4
dcl_indexableTemp x1[9], 4
if_z cb0[1].y
  mov o0.xyzw, l(0,0,0,0)
  ret 
endif 
if_nz cb0[0].w
  mov x0[0].x, l(-1.000000)
  mov x0[1].x, l(-2.000000)
  mov x0[2].x, l(-1.000000)
  mov x0[3].x, l(0)
  mov x0[4].x, l(0)
  mov x0[5].x, l(0)
  mov x0[6].x, l(1.000000)
  mov x0[7].x, l(2.000000)
  mov x0[8].x, l(1.000000)
  mov x1[0].x, l(-1.000000)
  mov x1[1].x, l(0)
  mov x1[2].x, l(1.000000)
  mov x1[3].x, l(-2.000000)
  mov x1[4].x, l(0)
  mov x1[5].x, l(2.000000)
  mov x1[6].x, l(-1.000000)
  mov x1[7].x, l(0)
  mov x1[8].x, l(1.000000)
  exp r0.x, cb0[0].z
  mul r0.xy, r0.xxxx, l(0.000130, 0.000234, 0.000000, 0.000000)
  mov r0.zw, l(0,0,0,0)
  mov r1.xyz, l(0,-1,-1,0)
  loop 
    breakc_z r1.z
    itof r2.x, r1.y
    mov r1.w, r1.x
    mov r2.zw, r0.zzzw
    mov r3.xy, l(-1,-1,0,0)
    loop 
      breakc_z r3.y
      itof r2.y, r3.x
      mad r3.zw, r2.xxxy, r0.xxxy, v1.xxxy
      sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, r3.zwzz, t0.xyzw, s0, l(0.000000)
      dp3 r2.y, r4.xyzx, l(0.300000, 0.590000, 0.110000, 0.000000)
      mov r3.z, x0[r1.w + 0].x
      mad r2.z, r2.y, r3.z, r2.z
      mov r3.z, x1[r1.w + 0].x
      mad r2.w, r2.y, r3.z, r2.w
      iadd r1.w, r1.w, l(1)
      iadd r3.x, r3.x, l(1)
      ige r3.y, l(1), r3.x
    endloop 
    mov r1.x, r1.w
    mov r0.zw, r2.zzzw
    iadd r1.y, r1.y, l(1)
    ige r1.z, l(1), r1.y
  endloop 
  div r0.x, r0.w, r0.z
  min r0.y, |r0.x|, l(1.000000)
  max r0.z, |r0.x|, l(1.000000)
  div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
  mul r0.y, r0.z, r0.y
  mul r0.z, r0.y, r0.y
  mad r0.w, r0.z, l(0.020835), l(-0.085133)
  mad r0.w, r0.z, r0.w, l(0.180141)
  mad r0.w, r0.z, r0.w, l(-0.330299)
  mad r0.z, r0.z, r0.w, l(0.999866)
  mul r0.w, r0.z, r0.y
  lt r1.x, l(1.000000), |r0.x|
  mad r0.w, r0.w, l(-2.000000), l(1.570796)
  and r0.w, r1.x, r0.w
  mad r0.y, r0.y, r0.z, r0.w
  min r0.x, r0.x, l(1.000000)
  lt r0.x, r0.x, -r0.x
  movc r0.x, r0.x, -r0.y, r0.y
  sincos r1.x, r2.x, r0.x
  sincos r0.x, null, -r0.x
  mov r2.y, r1.x
  mov r0.y, r2.x
else 
  mov r2.xy, l(0,0,0,0)
  mov r0.xy, l(0,0,0,0)
endif 
sample_l_indexable(texture2d)(float,float,float,float) r0.z, v1.xyxx, t2.yzxw, s0, l(0.000000)
mad r0.w, -r0.z, l(999.000000), l(1000.000000)
div r0.z, r0.z, r0.w
ge r0.z, l(0.990000), r0.z
if_nz r0.z
  mov o0.xyzw, l(0,0,0,0)
  ret 
endif 
exp r0.z, cb0[0].z
mul r0.zw, r0.zzzz, l(0.000000, 0.000000, 0.000260, 0.000468)
round_z r1.xy, -cb0[2].zwzz
ftoi r1.zw, -cb0[2].zzzw
ge r1.xy, l(0.000000, 0.000000, 0.000000, 0.000000), r1.xyxx
mov r3.xyz, l(0,0,0,0)
mov r4.xyz, l(0,0,0,0)
mov r2.z, cb0[0].w
mov r2.w, l(0)
mov r3.w, r1.z
mov r4.w, r1.x
loop 
  breakc_z r4.w
  itof r5.x, r3.w
  mov r6.xyz, r3.xyzx
  mov r7.xyz, r4.xyzx
  mov r5.zw, r2.zzzw
  mov r6.w, r1.w
  mov r7.w, r1.y
  loop 
    breakc_z r7.w
    itof r5.y, r6.w
    mul r8.xy, r0.zwzz, r5.xyxx
    dp2 r9.x, r8.xyxx, r2.xyxx
    dp2 r9.y, r8.xyxx, r0.xyxx
    movc r8.xy, r5.zzzz, r9.xyxx, r8.xyxx
    add r8.xy, r8.xyxx, v1.xyxx
    sample_l_indexable(texture2d)(float,float,float,float) r8.xyz, r8.xyxx, t0.xyzw, s0, l(0.000000)
    add r6.xyz, r6.xyzx, r8.xyzx
    mad r7.xyz, r8.xyzx, r8.xyzx, r7.xyzx
    iadd r5.w, r5.w, l(1)
    iadd r6.w, r6.w, l(1)
    itof r5.y, r6.w
    ge r7.w, l(0.000000), r5.y
  endloop 
  mov r3.xyz, r6.xyzx
  mov r4.xyz, r7.xyzx
  mov r2.w, r5.w
  iadd r3.w, r3.w, l(1)
  itof r5.x, r3.w
  ge r4.w, l(0.000000), r5.x
endloop 
itof r2.z, r2.w
div r3.xyz, r3.xyzx, r2.zzzz
div r4.xyz, r4.xyzx, r2.zzzz
mad r4.xyz, -r3.xyzx, r3.xyzx, r4.xyzx
add r2.z, r4.y, r4.x
add r3.w, r4.z, r2.z
ge r2.zw, cb0[2].zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
mov r4.xyz, l(0,0,0,0)
mov r4.w, cb0[0].w
mov r5.xyzw, l(0,0,0,0)
mov r6.x, l(0)
mov r6.y, r2.z
loop 
  breakc_z r6.y
  itof r7.x, r6.x
  mov r8.xyz, r4.xyzx
  mov r9.xyz, r5.xyzx
  mov r6.z, r4.w
  mov r6.w, r5.w
  mov r7.zw, r1.wwwy
  loop 
    breakc_z r7.w
    itof r7.y, r7.z
    mul r10.xy, r0.zwzz, r7.xyxx
    dp2 r11.x, r10.xyxx, r2.xyxx
    dp2 r11.y, r10.xyxx, r0.xyxx
    movc r10.xy, r6.zzzz, r11.xyxx, r10.xyxx
    add r10.xy, r10.xyxx, v1.xyxx
    sample_l_indexable(texture2d)(float,float,float,float) r10.xyz, r10.xyxx, t0.xyzw, s0, l(0.000000)
    add r8.xyz, r8.xyzx, r10.xyzx
    mad r9.xyz, r10.xyzx, r10.xyzx, r9.xyzx
    iadd r6.w, r6.w, l(1)
    iadd r7.z, r7.z, l(1)
    itof r7.y, r7.z
    ge r7.w, l(0.000000), r7.y
  endloop 
  mov r4.xyz, r8.xyzx
  mov r5.xyz, r9.xyzx
  mov r5.w, r6.w
  iadd r6.x, r6.x, l(1)
  itof r6.z, r6.x
  ge r6.y, cb0[2].z, r6.z
endloop 
itof r1.y, r5.w
div r4.xyz, r4.xyzx, r1.yyyy
div r5.xyz, r5.xyzx, r1.yyyy
mad r5.xyz, -r4.xyzx, r4.xyzx, r5.xyzx
add r1.y, r5.y, r5.x
add r4.w, r5.z, r1.y
mov r5.xyz, l(0,0,0,0)
mov r6.xyz, l(0,0,0,0)
mov r1.y, cb0[0].w
mov r1.w, l(0)
mov r5.w, r1.z
mov r6.w, r1.x
loop 
  breakc_z r6.w
  itof r7.x, r5.w
  mov r8.xyz, r5.xyzx
  mov r9.xyz, r6.xyzx
  mov r7.zw, r1.yyyw
  mov r8.w, l(0)
  mov r9.w, r2.w
  loop 
    breakc_z r9.w
    itof r7.y, r8.w
    mul r10.xy, r0.zwzz, r7.xyxx
    dp2 r11.x, r10.xyxx, r2.xyxx
    dp2 r11.y, r10.xyxx, r0.xyxx
    movc r10.xy, r7.zzzz, r11.xyxx, r10.xyxx
    add r10.xy, r10.xyxx, v1.xyxx
    sample_l_indexable(texture2d)(float,float,float,float) r10.xyz, r10.xyxx, t0.xyzw, s0, l(0.000000)
    add r8.xyz, r8.xyzx, r10.xyzx
    mad r9.xyz, r10.xyzx, r10.xyzx, r9.xyzx
    iadd r7.w, r7.w, l(1)
    iadd r8.w, r8.w, l(1)
    itof r7.y, r8.w
    ge r9.w, cb0[2].w, r7.y
  endloop 
  mov r5.xyz, r8.xyzx
  mov r6.xyz, r9.xyzx
  mov r1.w, r7.w
  iadd r5.w, r5.w, l(1)
  itof r7.x, r5.w
  ge r6.w, l(0.000000), r7.x
endloop 
itof r1.x, r1.w
div r5.xyz, r5.xyzx, r1.xxxx
div r1.xyz, r6.xyzx, r1.xxxx
mad r1.xyz, -r5.xyzx, r5.xyzx, r1.xyzx
add r1.x, r1.y, r1.x
add r5.w, r1.z, r1.x
mov r1.xyz, l(0,0,0,0)
mov r1.w, cb0[0].w
mov r6.xyzw, l(0,0,0,0)
mov r7.x, l(0)
mov r7.y, r2.z
loop 
  breakc_z r7.y
  itof r8.x, r7.x
  mov r9.xyz, r1.xyzx
  mov r10.xyz, r6.xyzx
  mov r7.z, r1.w
  mov r7.w, r6.w
  mov r8.z, l(0)
  mov r8.w, r2.w
  loop 
    breakc_z r8.w
    itof r8.y, r8.z
    mul r11.xy, r0.zwzz, r8.xyxx
    dp2 r12.x, r11.xyxx, r2.xyxx
    dp2 r12.y, r11.xyxx, r0.xyxx
    movc r11.xy, r7.zzzz, r12.xyxx, r11.xyxx
    add r11.xy, r11.xyxx, v1.xyxx
    sample_l_indexable(texture2d)(float,float,float,float) r11.xyz, r11.xyxx, t0.xyzw, s0, l(0.000000)
    add r9.xyz, r9.xyzx, r11.xyzx
    mad r10.xyz, r11.xyzx, r11.xyzx, r10.xyzx
    iadd r7.w, r7.w, l(1)
    iadd r8.z, r8.z, l(1)
    itof r8.y, r8.z
    ge r8.w, cb0[2].w, r8.y
  endloop 
  mov r1.xyz, r9.xyzx
  mov r6.xyz, r10.xyzx
  mov r6.w, r7.w
  iadd r7.x, r7.x, l(1)
  itof r7.z, r7.x
  ge r7.y, cb0[2].z, r7.z
endloop 
itof r0.x, r6.w
div r0.yzw, r1.xxyz, r0.xxxx
div r1.xyz, r6.xyzx, r0.xxxx
mad r1.xyz, -r0.yzwy, r0.yzwy, r1.xyzx
add r0.x, r1.y, r1.x
add r0.x, r1.z, r0.x
lt r1.x, r4.w, r3.w
movc r1.xyzw, r1.xxxx, r4.xyzw, r3.xyzw
lt r2.x, r5.w, r1.w
movc r1.xyzw, r2.xxxx, r5.xyzw, r1.xyzw
lt r0.x, r0.x, r1.w
movc o0.xyz, r0.xxxx, r0.yzwy, r1.xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 271 instruction slots used
