//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   float BlurRadius;                  // Offset:    0 Size:     4
//   int BlurSamples;                   // Offset:    4 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyz         0   TARGET   float   xyz 
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyz
dcl_temps 8
ilt r0.x, l(0), cb0[0].y
itof r0.y, cb0[0].y
mul r0.zw, cb0[0].xxxx, l(0.000000, 0.000000, 0.000260, 0.000468)
mov r1.xyzw, l(0,0,0,0)
mov r2.x, l(0)
mov r2.y, r0.x
loop 
  breakc_z r2.y
  itof r3.y, r2.x
  mov r4.xyz, r1.xyzx
  mov r2.z, r1.w
  mov r2.w, l(0)
  mov r3.z, r0.x
  loop 
    breakc_z r3.z
    itof r3.x, r2.w
    div r3.xw, r3.xxxy, r0.yyyy
    add r5.xy, -r3.xwxx, l(1.000000, 1.000000, 0.000000, 0.000000)
    dp2 r4.w, r5.xyxx, r5.xyxx
    sqrt r4.w, r4.w
    min r5.xy, r4.wwww, l(1.000000, 0.500000, 0.000000, 0.000000)
    max r4.w, r5.x, l(0.500000)
    add r5.x, r4.w, r4.w
    mad r5.x, r5.y, r5.y, r5.x
    mad r4.w, -r4.w, r4.w, r5.x
    mad r4.w, r4.w, l(2.000000), l(-1.500000)
    mul r3.xw, r0.zzzw, r3.xxxw
    add r5.x, -r4.w, l(1.000000)
    mul r6.xy, r3.xwxx, r5.xxxx
    add r2.z, r2.z, r4.w
    mad r5.yz, r3.xxwx, r5.xxxx, v1.xxyx
    sample_l_indexable(texture2d)(float,float,float,float) r5.yzw, r5.yzyy, t0.wxyz, s0, l(0.000000)
    mad r3.xw, -r3.xxxw, r5.xxxx, v1.xxxy
    sample_l_indexable(texture2d)(float,float,float,float) r7.xyz, r3.xwxx, t0.xyzw, s0, l(0.000000)
    add r5.xyz, r5.yzwy, r7.xyzx
    mov r6.z, -r6.y
    add r3.xw, r6.xxxz, v1.xxxy
    sample_l_indexable(texture2d)(float,float,float,float) r7.xyz, r3.xwxx, t0.xyzw, s0, l(0.000000)
    add r5.xyz, r5.xyzx, r7.xyzx
    add r3.xw, -r6.xxxz, v1.xxxy
    sample_l_indexable(texture2d)(float,float,float,float) r6.xyz, r3.xwxx, t0.xyzw, s0, l(0.000000)
    add r5.xyz, r5.xyzx, r6.xyzx
    mad r4.xyz, r5.xyzx, r4.wwww, r4.xyzx
    iadd r2.w, r2.w, l(1)
    ilt r3.z, r2.w, cb0[0].y
  endloop 
  mov r1.xyz, r4.xyzx
  mov r1.w, r2.z
  iadd r2.x, r2.x, l(1)
  ilt r2.y, r2.x, cb0[0].y
endloop 
mul r0.x, r1.w, l(4.000000)
div o0.xyz, r1.xyzx, r0.xxxx
ret 
// Approximately 54 instruction slots used
